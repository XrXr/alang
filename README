Run `go test -tags integration` to run integration tests
Run `go generate parsing/*go` to get proper parse tree printing
Run `go generate ir/*go` to get proper ir printing

## Notes

Here is what the compiler does to generate a binary:
  parse into ast -> frontend generates ir -> type check/inference happens on ir -> generate nasm asm -> pass to nasm and ld

- The parser parses a segment and then sort of contract that segment so it can use it when parsing other segments
- Instructions from ir operate on variables numbered from 0. Variables can be of any size
- The first few variables are procedure arguments
- Pruning is necessary for correctness for taking address of varaibles. It gets rid of superfluous ir.Assign's
- While most irs have all the variables they use in the main struct body, there are some exceptions. See `frontend.Prune()`. The Extra field of ir.Inst comes in handy
